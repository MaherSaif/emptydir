#!/usr/bin/env bash

# Copyright (c) Adam Serafini 2016

# Don't allow use of uninitialised variables
set -u

usage() {
  echo 'usage: emptydir [-a] directory ...'
  exit 1
}

emptyhidden() {
  # Remove hidden files and subdirectories from a directory.

  # This requires a 'trick' because normally removing .* results in the
  # error that rm cannot remove '.' and '..'.

  # It has two components that use wildcards:

  #	 1/ $1/..?* removes all dot-dot files and subdirs except '..'
  #	 2/ $1/.[!.]* removes all dot files and subdirs except '.'

  rm -rf $1/..?* $1/.[!.]*
}

empty() {
  # Remove visible files and subdirectories from a directory.

  rm -rf $1/*
}

abspath() {
  # Echo the absolute path of a directory path argument.

  echo $(cd $1; pwd)
}

emptypath() {
  # Handle the full logic for emptying a path including user confirmation,
  # validity test and error reporting.

  if [ -d "$1" ]; then
    # Convert to absolute path.
    local path=$(abspath $1)

    # Prompt for confirmation if the user hasn't set the -f flag.
    if [ "$force" = false ]; then
      read -p "empty ${path}? " -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        # Exit the function early if the user does not confirm.
        return
      fi
    fi

    empty $path
    # If -a flag was passed also remove hidden files and dirs.
    if [ "$remove_hidden" = true ]; then
      emptyhidden $path
    fi

  elif [ -f "$path" ]; then
    # It was a valid path but it wasn't a directoy.
    echo "emptydir: $path: Not a directory" >&2
    retval=1

  else
    echo "emptydir: $path: No such file or directory" >&2
    retval=1
  fi
}

main() {
  # By default, do not empty the directory of hidden files or subdirectories
  # but do prompt for confirmation.
  local remove_hidden=false
  local force=false

  # Parse the options. The only valid options are -a (all) which empties the
  # directory of hidden files and subdirectories and -f (force) which suppresses
  # any confirmation from the user.
  while getopts ":af" opt; do
    case $opt in
      a)
        remove_hidden=true
        ;;
      f)
        force=true
        ;;
      \?)
        echo "emptydir: illegal option: -- $OPTARG" >&2
        usage
        ;;
    esac
  done

  # Remove all options parsed by getopts.
  shift "$((OPTIND-1))"

  # If no directory arguments given, show usage and exit
  if [ $# -eq 0 ]; then
    usage
  fi

  # Script returns 0 if all confirmed directories were emptied, else 1.
  retval=0
  # Loop through the directory arguments.
  for path in "$@"
  do
    emptypath $path
  done

  exit $retval
}

main "$@"
